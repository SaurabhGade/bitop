#include<math.h>
#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<assert.h>
extern void litTobigEnd(void *buff, unsigned int n);
extern void memprint(void *ptr, int size);
unsigned int sad;
void* encode(unsigned int num){
  unsigned int byte_required;
  unsigned int buff_size  = log2(num)+1; 
  unsigned int curr = buff_size;
  unsigned char arr[32];
  unsigned char limiter = 1;
  unsigned char size;
  unsigned char val;
  unsigned char bits_used = 0;
  unsigned char rem = 0;
  unsigned char *BUFF = NULL;
  int i = 0;

  arr[i] = buff_size; i+=1;
  while(curr > 2){
    arr[i] = log2(curr)+1;
    buff_size += arr[i]+limiter;
    curr = arr[i];
    i+=1; 
  }
  for(int j = i-1; j >= 0; j--){ printf("%d ",arr[j]);}; printf("\n");

  byte_required = buff_size/8+1;
  void *buff = malloc(byte_required);
  assert(buff != NULL);

  i-=1;
  BUFF = (unsigned char*)buff;
  while(i > 0){
    size = arr[i];
    val = arr[i-1];
    rem = 8 - (bits_used % 8);
    if(rem >= size){
      val <<= 8-((bits_used%8)+size);
      *BUFF |= val;
    }
    else{
      val >>= ((size-rem)%8);
      *BUFF |= val;
      val = arr[i-1];
      BUFF+=1;
      val <<= (8-((size-rem)%8));
      *BUFF |= val;
    }
    bits_used += size+limiter;
    if(i == 1){
      val = 0b10000000;
      if(bits_used % 8 == 0) BUFF+=1;
      *((unsigned char*)(buff)+(int)(bits_used/8)) |= (val >> ((bits_used%8)-1));
    }
    i-=1;
  }
  BUFF = buff+(bits_used/8);
  rem = 8-(bits_used%8);
  printf("remeaning bits form curr byte: %d\n",rem);



  return buff;
}

